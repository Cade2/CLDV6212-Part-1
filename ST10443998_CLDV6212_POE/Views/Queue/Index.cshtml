@model List<ST10443998_CLDV6212_POE.Models.QueuePrettyVm>
@{
    ViewData["Title"] = "Queue";
    string? q = ViewBag.Q as string;
}

<h2>Queue (Transactions / Inventory)</h2>
<p class="text-success">@TempData["Ok"]</p><p class="text-danger">@TempData["Err"]</p>

<form method="get" class="row g-2 mb-3">
    <div class="col-md-9">
        <input name="q" value="@q" class="form-control" placeholder="Filter messages (OrderId, Description)..." />
    </div>
    <div class="col-md-3">
        <button class="btn btn-outline-secondary w-100">Filter</button>
    </div>
</form>

<form asp-action="Enqueue" method="post" class="row g-2 mb-3">
    @Html.AntiForgeryToken()
    <div class="col-md-9"><input name="text" class="form-control" placeholder='e.g., Processing order #12345' /></div>
    <div class="col-md-3"><button class="btn btn-primary w-100">Enqueue</button></div>
</form>

<form asp-action="Dequeue" method="post" class="d-inline">
    @Html.AntiForgeryToken()
    <input type="number" name="n" min="1" max="32" value="10" class="form-control d-inline w-auto me-2" />
    <button class="btn btn-outline-primary">Dequeue N</button>
</form>

<form asp-action="Clear" method="post" class="d-inline ms-2"
      onsubmit="return confirm('Clear ALL messages? This cannot be undone.');">
    @Html.AntiForgeryToken()
    <button class="btn btn-outline-danger">Clear All</button>
</form>

<table class="table mt-3">
    <thead>
        <tr>
            <th>OrderId</th>
            <th>Description</th>
            <th>Created (payload)</th>
            <th>Inserted (queue)</th>
            <th>Raw</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var m in Model)
        {
            var created = m.Event?.CreatedUtc?.ToLocalTime().ToString("yyyy/MM/dd HH:mm:ss");
            var inserted = m.InsertedOn?.ToLocalTime().ToString("yyyy/MM/dd HH:mm:ss");
            <tr>
                <td>@(m.Event?.OrderId ?? "—")</td>
                <td>@(m.Event?.Description ?? "—")</td>
                <td>@(string.IsNullOrEmpty(created) ? "—" : created)</td>
                <td>@(string.IsNullOrEmpty(inserted) ? "—" : inserted)</td>
                <td class="text-muted small">@((m.Event is null) ? m.RawText : null)</td>
            </tr>
        }
    </tbody>
</table>
